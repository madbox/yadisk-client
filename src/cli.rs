use clap::{App, Arg, SubCommand};

pub fn init_cli() -> clap::ArgMatches<'static> {
    App::new("yadisk-client")
                            .version("0.1.0")
                            .author("Mikhail B. <m@mdbx.ru>")
                            .about("Does some things with Yandex Disk")
                            .arg(Arg::with_name("oauth_token")
                                .short("t")
                                .long("oauth_token")
                                .value_name("OAUTH_TOKEN")
                                .help("Sets Yandex API OAuth Token https://yandex.ru/dev/oauth/doc/dg/concepts/ya-oauth-intro-docpage/")
                                .takes_value(true))
                            .arg(Arg::with_name("url")
                                .short("u")
                                .long("url")
                                .value_name("URL")
                                .help("Sets a custom Yandex Disk url")
                                .takes_value(true))
                            .arg(Arg::with_name("proxy")
                                .short("p")
                                .long("proxy")
                                .value_name("PROXY")
                                .help("Sets a internet proxy")
                                .takes_value(true))
                            .arg(Arg::with_name("config")
                                .short("c")
                                .long("config")
                                .value_name("CONFIG")
                                .help("Get configuration from file")
                                .takes_value(true))
                            .subcommand(SubCommand::with_name("login")
                                .about("Authorize this application to access Yandex Disk. You will be provided with url to grant privileges. Then you will be asked for an authorization code"))
                            .subcommand(SubCommand::with_name("info")
                                .about("Get general information about yandex disk account"))
                            .subcommand(SubCommand::with_name("last")
                                .about("Get last uploaded file list")
                                .arg(Arg::with_name("limit")
                                    .short("l")
                                    .long("limit")
                                    .default_value("5")))
                            .subcommand(SubCommand::with_name("download")
                                .about("Download single file")
                                .arg(Arg::with_name("path")
                                    .help("File name with full path to download")
                                    .index(1))
                                .arg(Arg::with_name("target")
                                    .help("Target path file will be saved to")
                                    .index(2)))
                            .subcommand(SubCommand::with_name("upload")
                                .about("Upload single file")
                                .arg(Arg::with_name("path")
                                    .help("Local filename with full path")
                                    .index(1))
                                .arg(Arg::with_name("remote")
                                    .help("Remote path file will be saved to")
                                    .index(2))
                                .arg(Arg::with_name("overwrite")
                                    .help("Overwrite file if it already exists on remote path. true|false")
                                    .long("overwrite")
                                    .value_name("overwrite")
                                    .default_value("false")))
                            .subcommand(SubCommand::with_name("delete")
                                    .about("Delete file on remote side")
                                    .arg(Arg::with_name("remote")
                                        .help("Remote path to delete file")
                                        .index(1)))
                            .subcommand(SubCommand::with_name("list")
                                .about("Get directory listing")
                                .arg(Arg::with_name("long")
                                    .short("l")
                                    .long("long")
                                    .help("Pring additionl information on every object from list"))
                                .arg(Arg::with_name("path")
                                    .help("Sets the base path to fetch listing of. Default is root")
                                    .default_value("/")
                                    .index(1)))
                            .subcommand(SubCommand::with_name("publish")
                                .about("(not implemented) Publish directory and get link to STDOUT"))
                            .subcommand(SubCommand::with_name("unpublish")
                                .about("(not implemented) Unpublish directory"))
                            .subcommand(SubCommand::with_name("token")
                                .about("Get OAuth token proccedure. You will get URL to Yandex OAuth page")
                                .arg(Arg::with_name("newtoken")
                                    .help("Set new OAuth token. Token will be written to config file")
                                    .index(1)))
                            .subcommand(SubCommand::with_name("watch")
                                .about("(under development) Watch some path for file events")
/*                                .arg(Arg::with_name("path")
                                    .help("FS Path to watch")
                                    .short("p")
                                    .long("path")
                                    .takes_value(true)
                                    .required(true)
                                    .index(1))*/)
                                .get_matches()
}
